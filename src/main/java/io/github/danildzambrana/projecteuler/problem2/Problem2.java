package io.github.danildzambrana.projecteuler.problem2;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * <p>
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * <p>
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 * @see <a href="https://projecteuler.net/problem=2">Problem 2</a>
 */
public class Problem2 {
    public static void main(String[] args) {
        System.out.println(start(10));
    }

    /**
     * Recursive method to get the sum of all pair numbers before max value;
     * <br/>
     * Example.
     * <br/>
     * {@code fibonacci(0, 0, 1, 10);}
     * <br/>
     * The nums between 0 and 10 with fibonacci is: 1, 2, 3, 5, 8
     * <br/>
     * But the pair numbers is: 2 and 8.
     * <br/>
     * The result of this sum is: 10.
     * @param sum the actual sum value.
     * @param before the before value.
     * @param actual the actual value.
     * @param max the mac value.
     * @return sum of pair numbers between 1 and max.
     */
    private static long fibonacci(long sum, long before, long actual, long max) {
        long result = before + actual;

        if (result < max) {
            if (result % 2 == 0) {
                sum += result;
            }
            return fibonacci(sum, actual, result, max);
        }
        return sum;
    }

    /**
     * Simplify the use of {@link Problem2#fibonacci(long, long, long, long)} method.
     * @param max the max value in fibonacci.
     * @return the sum of pair numbers in fibonacci sequence.
     */
    private static long start(long max) {
        return fibonacci(0, 0, 1, max);
    }
}
